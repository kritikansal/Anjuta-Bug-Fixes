msgid ""
msgstr ""
"Project-Id-Version: anjuta manual\n"
"POT-Creation-Date: 2007-02-07 01:33+0100\n"
"PO-Revision-Date: 2007-02-07 01:44+0100\n"
"Last-Translator: Daniel Nylander <po@danielnylander.se>\n"
"Language-Team: Swedish <tp-sv@listor.tp-sv.se>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: C/tools.xml:3(title)
msgid "User-defined Tools"
msgstr ""

#: C/tools.xml:6(title)
#: C/introduction.xml:3(title)
msgid "Introduction"
msgstr "Introduktion"

#: C/tools.xml:7(para)
msgid "Often, you'll find the inbuilt functionality provided by Anjuta to be insufficient. In these cases, you might be tempted to either add the feature yourself to the Anjuta codebase or submit a feature request to implement the feature. However, both approaches are likely to be slow and problematic, especially if your tool is a specialized one. In these circumstances, it is advisable to use the Anjuta tools framework instead."
msgstr ""

#: C/tools.xml:16(para)
msgid "Anjuta provides a powerful framework for defining user-defined tools for extending it's functionality. Tools have access to almost all features of the IDE through the use of variables. You can add tools under any menu item, specify input, output and error redirection within the GUI framework and supply command line parameters to the tool."
msgstr ""

#: C/tools.xml:24(para)
msgid "The tools plugin has to be enabled to use this feature!"
msgstr ""

#: C/tools.xml:31(title)
msgid "Tools Examples"
msgstr ""

#: C/tools.xml:32(para)
msgid "This is a simple example how to use the tools plugin to integrate the GNOME ChangeLog generation script"
msgstr ""

#: C/tools.xml:38(title)
#: C/tools.xml:40(screeninfo)
msgid "The tool editor"
msgstr ""

#: C/template.xml:3(title)
msgid "new chapter"
msgstr ""

#: C/template.xml:4(para)
msgid "to be written"
msgstr ""

#: C/projects.xml:3(title)
msgid "Project Management"
msgstr "Projekthantering"

#: C/projects.xml:6(title)
msgid "Introduction to managing projects"
msgstr "Introduktion till projekthantering"

#: C/projects.xml:7(para)
msgid "If the program or application you are developing is a small one, and it is only going to be run on your computer, then a single source file will often serve the purpose. If the application is more complex, with multiple source files, it is useful to be able to keep track of your program and its resources. Such a <emphasis>program</emphasis> becomes a <emphasis>project</emphasis>."
msgstr ""

#: C/projects.xml:16(para)
msgid "Many command-line tools are available to maintain and manage a project, and each tool has its own specific rules and capabilities. Do not worry Anjuta will take care of everything. It is still possible to make use of other tools, which has the added advantage of making your project more flexible and more adaptable. However, before you start editing all those makefiles, bear in mind the files that Anjuta manages. These files will all be overwritten. If you do not want to get involved with manually editing project files, just relax and let Anjuta do it all. Creating a New Project Choose the menu item FileNew Project to start the application wizard. Read the first page carefully. Click on Next to proceed. Select the type of application you want to create in the second page. Click on Next to proceed. On the next pages, enter all the necessary details for your project. You cannot change these settings later. No white spaces or any non-alphanumeric characters, except underscore (_) and dash (-), are allowed in any of the entry boxes in this page (except the Author text box). You can also specify whether your project will have internationalization support using gettext (read the gettext info page for more details). This gives your project multilingual support for different regional languages such as English, French, Dutch etc.. The rest of the options are for setting whether the GNU copyright statement should appear in the comments at the top of each file, and enabling GNOME desktop menu information if necessary. The final step is to verify the information you have just supplied. Click on Finish to start generating the project. Once project generation is over, you can try it out by building the project and executing it. Loading and Saving Projects Loading Projects To open a project, choose the menu item File Open . Select the project file (*.anjuta) in the dialog and click OK. If the project has recently been opened, then you will find it listed in the menu FileRecent. Choose the project file from the list, and the project will be opened. As soon as a project is opened, Anjuta will enter Project mode. There are three panes in the project window. The first is the project pane and lists the project files organized in file types. The second is the symbol browser, which has already been discussed in section Symbol Browser and tags Brwoser. The third pane is the file view of the project and is more or less similar to a mini file-manager. In file view, all the files present in the project tree is visible. Right clicking on these files will pop up the file operation submenu. If the project is also a CVS tree, then corrosponing file revision numbers are also listing on the right of file names in the file view pane. Importing Projects The import project feature is used to import an already existing project and convert it into anjuta projcect. Activate the import project wizard from FileNew Project from existing sources and follow instructions dictated by the wizard. Once the project is imported, it could be opened in anjuta subsequently just like any other anjuta project. The import project features only works if your existing project is using autoconf/automake. Saving Projects The project is automatically saved when you close because all changes are made directly in the Makefile.am. Adding and Removing Files There are various different types of file that Anjuta will manage for you in the project: Source files Document files Pixmap files Help files Data files PO files Each of these different types exist in their own specific directories inside the project. Adding Files Choose the corresponding menu item from the Project Add Source file submenu. Select the file you want to add and the target you want to add it to in the dialog and click OK. If the file you choose has already been added to the project, then Anjuta will not add it again. It will also give you a warning that the file is already added. If the file you choose is not in the directory corresponding to the type you have selected, you will be asked to confirm that you wish to copy the file into that directory. Anjuta cannot add files which are outside of their correct directories. Removing Files To remove a file from the project, select the file you want to remove from the Project Listing, right-click to open the Operation popup menu and choose Remove. A confirmation dialog will appear, and the file will be removed from the project. The file is not deleted! The file is not deleted from the filesystem. It still exists, and you can add it back again later if you so wish. The file is only removed from the project listing, and will not take part in any of the project operations such as compiling, building, distribution etc.. Project Configuration Choose Project Properties to change the project configuration. You can add and remove depencies for your project there. Project properties dialog Project properties dialog Managing Project Files Anjuta manages all Makefile.am (or Makefile, in case of a Makefile based project) files for you. A tree of the scanned files is shown in the Project window. You can use Project Add Target to add a new target (executable, library, ...) to the project. To add files to the new target see Adding and Removing Files above. To add a new group to your project, use Project Add Groups. In most project backends (Automake, Makefile) group simply means directory. After you created a group you can add targets to that group. Compiling, Building and Executing a Project Overview An executable for a project is generated in two steps: Compiling Linking These steps are collectively known as Building. Some other steps may also be involved in the build process, but for the sake of simplicity, we will only look at these two steps. Compiling is the step in which object files are generated from their corresponding source files. For instance, a source file hello.c will generate hello.o after compilation. Usually you do not need to worry about these object files just think of them as intermediate files involved in creating the final executable. Once the object files (*.o files) are ready, they are all linked together (along with any libraries) to generate the final executable. This step is called Linking. Compiling the source In a project, the individual source files can be compiled separately into objects (*.o files). Although you do not have to worry about these object files, sometimes it is handy to compile a file first (for example, to make sure there are no syntax errors). Building a whole project can take a lot of time, especially in the case of larger and more complex applications. Therefore, you will probably go through a series of edit-compile-edit-compile-.... loops while a developing the project. To compile a file, choose the menu item Build Compile or click on the Compile icon on the extended toolbar. This will compile the active file. Building an executable Anjuta has no separate link command, simply because it is not necessary. The build process will compile all the source files and link them together along with the libraries. The build command will note recompile those files which are already up-to-date (this is called the dependency check). If you have already compiled all of the files individually, then the only thing the build step performs is the link. If you have already built the project and no dependent file has been modified, even the link stage will be skipped. So how exactly does the dependency check influence the project development? If you have modified a file, then all of the source files that depend on the modified file are recompiled. All files (not only the object files and executable) in the project are checked for these dependencies during the build process. If it is found that a particular file is dependent on some other file which has been modified, then that file will be re-generated. Since you have now got a rough understanding of the value of the dependency check, can you imagine how your life (as a programmer) would be if it had not been there? If you cannot answer just yet, then will find out when you start developing big projects! BuildBuild will build all of the files in the src (source) directory, and generate the executable. Build Build All will build the whole project all of the subdirectories (including src), are built recursively. Creating a distribution package To build the tarball distribution of the project choose Build Build Tarball. This will create a tarball (*.tar.gz) and put it in the top level project directory. Copy the file to a safe place for distribution. Install Choosing the menu item Build Install will install the generated application on your system. System wide installation You must be logged in as root to perform a system-wide install. Also note that for a GNOME application to use the pixmaps in the project, it must be installed as a system-wide application. Otherwise, when the application is executed in your project, there will be lots of pixmap not found errors. You can configure anjuta to use sudo or su before installing the project in the build preferences. Configure To run the configure script found in the top level project directory, choose the menu item Build Configure. The script will determine the system configuration and create some of the files required to perform a build (such as Makefile and config.h). This is necessary because the application may depend on specific configuration of some of these options. When to configure Until you run configure, you cannot start building the project. The configure script is (usually) run only once at the beginning of the first build process for example, just after you have extracted a source tarball of a project distribution. After that, configuration is automatically handled by the subsequent build processes. If you have used the Application Wizard to create the application, then you will not need to run configure separately: the wizard will run it as a part of the project generation process. You can also supply additional options to the configuration script. After choosing the Configure menu item, a dialog will appear to prompt for additional options. Configure options dialog Configure options dialog Enter any options (or leave it blank to accept the defaults) and click OK. To find out the options available to the configure script, enter --help in the option entry box and click OK. The options will be displayed in the Message window. There is no requirement to run configure only once. It can be run at any time, usually when the configuration options need to be changed. One thing to note is that, if the config.h file in the top level directory is changed, running configure again will not overwrite it. Auto generate Auto generation consists of two steps: running automake and then running autoconf. If an executable autogen.sh script is found in the top level project directory, this file will be executed instead of the two steps. Like configuration, auto generation is automatically handled by the build process. It can also be run in cases where it is difficult to configure the project (such as lots of errors reported due to mis-synchronization after modifying lots of build files). When to autogen.sh Unlike configuration, auto generation does not need to be run even once in fact, it does not need to be run at all! The option is available because it can be handy in some circumstances. Choose the menu item Build Auto generate to auto generate the project. Read the info pages of automake and autoconf for more details on how these tools work. Clean This option cleans the project and leaves it in a state that requires Build All to be performed. It deletes all of the files generated by the build process, including all object files (*.o files) and the executable(s) in the src directory (and other directories). Choose the menu item Build Clean to clean the project. Clean All There is not a great deal to say about Clean All (which might also be called Clean distribution, or clean dist for short). It cleans the project and leaves it in a state that requires Configure and Build All to be performed. It deletes all of the files generated by the build processes, including all the object files (*.o files), executable(s) and Makefiles. In other words, it leaves the project as though it has just been extracted from a distribution tarball. Choose the menu item Build Clean All to completely clean the project."
msgstr ""

#: C/preferences.xml:3(title)
msgid "Preferences"
msgstr "Inställningar"

#: C/preferences.xml:4(para)
msgid "Preferences are ways to customize <application>anjuta</application> to suit your tastes. Activate <menuchoice><guimenu>Settings</guimenu><guimenuitem>Preferences</guimenuitem></menuchoice> to bring up the preferences dialog. If you want to reset the preferences to their default values, it can be done from <menuchoice><guimenu>Settings</guimenu><guimenuitem> Set Default Preferences</guimenuitem></menuchoice>. Some are explained below."
msgstr ""

#: C/preferences.xml:11(title)
msgid "General"
msgstr "Allmänt"

#: C/preferences.xml:13(para)
msgid "<emphasis>Project Directory</emphasis> is the path where you plan to put all your projects. Application wizard creates new projects in this directory only. The default project directory is ~/Projects and generally, this is just fine for most people. Also, when Open project is activated, this is the base directory where the file selectior will start."
msgstr ""

#: C/preferences.xml:20(para)
msgid "<emphasis>User Info:</emphasis> Provide your correct Name and Email address here. They are not used to do software registration (pun), rather they are used to create ChangeLog entries and other insert text bits."
msgstr ""

#: C/preferences.xml:27(title)
msgid "File Manager"
msgstr "Filhanterare"

#: C/preferences.xml:29(para)
msgid "<emphasis>Root directory if no project is open</emphasis> is the path where the root of the file manager points to if no project is currently open."
msgstr ""

#: C/preferences.xml:34(para)
msgid "<emphasis>File Filter:</emphasis> It is possible to filter out some file from the file tree, for example hidden files or files that are ignored by the version control system which usually means they are generated at build time and should not be changed."
msgstr ""

#: C/license.xml:2(title)
msgid "License"
msgstr "Licens"

#: C/license.xml:3(para)
msgid "This program is free software; you can redistribute it and/or modify it under the terms of the <ulink type=\"ghelp\" url=\"gnome-help:gpl\">GNU General Public License</ulink> as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version."
msgstr ""

#: C/license.xml:10(para)
msgid "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the <citetitle>GNU General Public License</citetitle> for more details."
msgstr ""

#: C/license.xml:16(para)
msgid "A copy of the <citetitle>GNU General Public License</citetitle> is included as an appendix to the <citetitle>GNOME Users Guide</citetitle>. You may also obtain a copy of the <citetitle>GNU General Public License</citetitle> from the Free Software Foundation by visiting <ulink type=\"http\" url=\"http://www.fsf.org\"> their Web site</ulink> or by writing to <address> Free Software Foundation, Inc. <street>59 Temple Place</street> - Suite 330 <city>Boston</city>, <state>MA</state><postcode>02110-1301</postcode><country>USA</country></address>"
msgstr ""

#: C/legal.xml:2(para)
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License (GFDL), Version 1.1 or any later version published by the Free Software Foundation with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. You can find a copy of the GFDL at this <ulink type=\"help\" url=\"ghelp:fdl\">link</ulink> or in the file COPYING-DOCS distributed with this manual."
msgstr "Tillstånd att kopiera, distribuera och/eller modifiera detta dokument ges under villkoren i GNU Free Documentation License (GFDL), version 1.1 eller senare, utgivet av Free Software Foundation utan standardavsnitt och omslagstexter.  En kopia av GFDL finns att hämta på denna <ulink type=\"help\" url=\"ghelp:fdl\">länk</ulink> eller i filen COPYING-DOCS som medföljer denna handbok."

#: C/legal.xml:12(para)
msgid "This manual is part of a collection of GNOME manuals distributed under the GFDL. If you want to distribute this manual separately from the collection, you can do so by adding a copy of the license to the manual, as described in section 6 of the license."
msgstr "Denna handbok utgör en av flera GNOME-handböcker som distribueras under villkoren i GFDL.  Om du vill distribuera denna handbok separat från övriga handböcker kan du göra detta genom att lägga till en kopia av licensavtalet i handboken enligt instruktionerna i avsnitt 6 i licensavtalet."

#: C/legal.xml:19(para)
msgid "Many of the names used by companies to distinguish their products and services are claimed as trademarks. Where those names appear in any GNOME documentation, and the members of the GNOME Documentation Project are made aware of those trademarks, then the names are in capital letters or initial capital letters."
msgstr "Flera namn på produkter och tjänster är registrerade varumärken. I de fall dessa namn förekommer i GNOME-dokumentation - och medlemmarna i GNOME-dokumentationsprojektet är medvetna om dessa varumärken - är de skrivna med versaler eller med inledande versal."

#: C/legal.xml:35(para)
msgid "DOCUMENT IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, WITHOUT LIMITATION, WARRANTIES THAT THE DOCUMENT OR MODIFIED VERSION OF THE DOCUMENT IS FREE OF DEFECTS MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING. THE ENTIRE RISK AS TO THE QUALITY, ACCURACY, AND PERFORMANCE OF THE DOCUMENT OR MODIFIED VERSION OF THE DOCUMENT IS WITH YOU. SHOULD ANY DOCUMENT OR MODIFIED VERSION PROVE DEFECTIVE IN ANY RESPECT, YOU (NOT THE INITIAL WRITER, AUTHOR OR ANY CONTRIBUTOR) ASSUME THE COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF ANY DOCUMENT OR MODIFIED VERSION OF THE DOCUMENT IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER; AND"
msgstr "DOKUMENTET TILLHANDAHÅLLS I \"BEFINTLIGT SKICK\" UTAN NÅGRA SOM HELST GARANTIER, VARE SIG UTTRYCKLIGA ELLER UNDERFÖRSTÅDDA, INKLUSIVE, MEN INTE BEGRÄNSAT TILL, GARANTIER ATT DOKUMENTET ELLER EN MODIFIERAD VERSION AV DOKUMENTET INTE INNEHÅLLER NÅGRA FELAKTIGHETER, ÄR LÄMPLIGT FÖR ETT VISST ÄNDAMÅL ELLER INTE STRIDER MOT LAG. HELA RISKEN VAD GÄLLER KVALITET, EXAKTHET OCH UTFÖRANDE AV DOKUMENTET OCH MODIFIERADE VERSIONER AV DOKUMENTET LIGGER HELT OCH HÅLLET PÅ ANVÄNDAREN. OM ETT DOKUMENT ELLER EN MODIFIERAD VERSION AV ETT DOKUMENT SKULLE VISA SIG INNEHÅLLA FELAKTIGHETER I NÅGOT HÄNSEENDE ÄR DET DU (INTE DEN URSPRUNGLIGA SKRIBENTEN, FÖRFATTAREN ELLER NÅGON ANNAN MEDARBETARE) SOM FÅR STÅ FÖR ALLA EVENTUELLA KOSTNADER FÖR SERVICE, REPARATIONER ELLER KORRIGERINGAR. DENNA GARANTIFRISKRIVNING UTGÖR EN VÄSENTLIG DEL AV DETTA LICENSAVTAL. DETTA INNEBÄR ATT ALL ANVÄNDNING AV ETT DOKUMENT ELLER EN MODIFIERAD VERSION AV ETT DOKUMENT BEVILJAS ENDAST UNDER DENNA ANSVARSFRISKRIVNING; OCH"

#: C/legal.xml:55(para)
msgid "UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER IN TORT (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL THE AUTHOR, INITIAL WRITER, ANY CONTRIBUTOR, OR ANY DISTRIBUTOR OF THE DOCUMENT OR MODIFIED VERSION OF THE DOCUMENT, OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL, WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER DAMAGES OR LOSSES ARISING OUT OF OR RELATING TO USE OF THE DOCUMENT AND MODIFIED VERSIONS OF THE DOCUMENT, EVEN IF SUCH PARTY SHALL HAVE BEEN INFORMED OF THE POSSIBILITY OF SUCH DAMAGES."
msgstr "UNDER INGA OMSTÄNDIGHETER ELLER INOM RAMEN FÖR NÅGON LAGSTIFTNING, OAVSETT OM DET GÄLLER KRÄNKNING (INKLUSIVE VÅRDSLÖSHET), KONTRAKT ELLER DYLIKT, SKA FÖRFATTAREN, DEN URSPRUNGLIGA SKRIBENTEN ELLER ANNAN MEDARBETARE ELLER ÅTERFÖRSÄLJARE AV DOKUMENTET ELLER AV EN MODIFIERAD VERSION AV DOKUMENTET ELLER NÅGON LEVERANTÖR TILL NÅGON AV NÄMNDA PARTER STÄLLAS ANSVARIG GENTEMOT NÅGON FÖR NÅGRA DIREKTA, INDIREKTA, SÄRSKILDA ELLER OFÖRUTSEDDA SKADOR ELLER FÖLJDSKADOR AV NÅGOT SLAG, INKLUSIVE, MEN INTE BEGRÄNSAT TILL, SKADOR BETRÄFFANDE FÖRLORAD GOODWILL, HINDER I ARBETET, DATORHAVERI ELLER NÅGRA ANDRA TÄNKBARA SKADOR ELLER FÖRLUSTER SOM KAN UPPKOMMA PÅ GRUND AV ELLER RELATERAT TILL ANVÄNDNINGEN AV DOKUMENTET ELLER MODIFIERADE VERSIONER AV DOKUMENTET, ÄVEN OM PART SKA HA BLIVIT INFORMERAD OM MÖJLIGHETEN TILL SÅDANA SKADOR."

#: C/legal.xml:28(para)
msgid "DOCUMENT AND MODIFIED VERSIONS OF THE DOCUMENT ARE PROVIDED UNDER THE TERMS OF THE GNU FREE DOCUMENTATION LICENSE WITH THE FURTHER UNDERSTANDING THAT: <placeholder-1/>"
msgstr "DOKUMENTET OCH MODIFIERADE VERSIONER AV DOKUMENTET TILLHANDAHÅLLS UNDER VILLKOREN I GNU FREE DOCUMENTATION LICENSE ENDAST UNDER FÖLJANDE FÖRUTSÄTTNINGAR: <placeholder-1/>"

#: C/introduction.xml:4(para)
msgid "<application>Anjuta</application> is a versatile Integrated Development Environment (IDE) for C and C++. It has been written for GTK+/GNOME, and features a number of advanced programming facilities. It is a graphical interface to the collection of command line programming tools available for Linux and UNIX systems. These are usually run via a text console, and can be unfriendly to use."
msgstr ""

#: C/introduction.xml:12(para)
msgid "<application>Anjuta</application> is an effort to marry the flexibility and power of command line tools with the ease-of-use of the GNOME graphical user interface. It has been made as user-friendly as possible."
msgstr ""

#: C/introduction.xml:20(title)
#: C/introduction.xml:22(screeninfo)
msgid "Anjuta in action"
msgstr ""

#: C/introduction.xml:28(para)
msgid "Please report any problems with <application>Anjuta</application> - this will help to improve the software, as well as helping the Open Source community."
msgstr ""

#: C/interface.xml:2(title)
msgid "Getting Familiar with Anjuta"
msgstr ""

#: C/interface.xml:5(title)
msgid "Starting Anjuta"
msgstr "Starta Anjuta"

#: C/interface.xml:6(para)
msgid "To start <application>Anjuta</application>, open the GNOME <guimenu>Main Menu</guimenu>. <application>Anjuta</application> is found on the <guisubmenu>Development</guisubmenu> submenu. In RedHat 8.0 or later anjuta can be found in <guisubmenu>Extra</guisubmenu> submenu and then <guisubmenu>Programming</guisubmenu> submenu."
msgstr ""

#: C/interface.xml:13(title)
msgid "Anjuta application icon"
msgstr ""

#: C/interface.xml:15(screeninfo)
msgid "Anjuta application icon on the Development menu"
msgstr ""

#: C/interface.xml:19(para)
msgid "Click on the <application>Anjuta</application> icon to start. The IDE (<emphasis>Integrated Development Environment</emphasis>) will open. Alternatively, <application>anjuta</application> can be started from a terminal by issuing the command <command>anjuta</command>. If <application>anjuta</application> us started for the first time, it will greet you with a welcome message."
msgstr ""

#: C/interface.xml:28(title)
msgid "Menus"
msgstr "Menyer"

#: C/interface.xml:29(para)
msgid "At the top of the <application>Anjuta</application> main window is the menubar. Almost all of the functions are available by activating the appropriate menu item. The functions have been grouped according to their type. For example, the file operations have been grouped into the <guisubmenu>File</guisubmenu> menu."
msgstr ""

#: C/interface.xml:38(title)
msgid "Menubar"
msgstr "Menyrad"

#: C/interface.xml:40(screeninfo)
msgid "Anjuta menubar"
msgstr ""

#: C/interface.xml:45(para)
msgid "Most of the menus and submenus can be detached. Click on the detach bar (the dashed line just above the first menu item). Once the menu is detached, it will become an independent window."
msgstr ""

#: C/interface.xml:52(title)
#: C/interface.xml:54(screeninfo)
msgid "File menu"
msgstr ""

#: C/interface.xml:59(para)
msgid "Shortcut keys are available for many of the menu options. All of the shortcut keys are shown alongside the corresponding menu items. A useful reference to the shortcut keys which are not directly attachted with the menu is also available in the next section."
msgstr ""

#: C/interface.xml:69(title)
msgid "Useful Shortcuts"
msgstr "Användbara genvägar"

#: C/interface.xml:73(para)
msgid "<emphasis>Switch Editor page:</emphasis> CTRL-TAB (forward) and CTRL-SHIFT-TAB (backward) -- The pages could also be switched by right clicking on the notebook tabs and selecting an editor tab (useful when all the tabs in the editor are not visible at once). Some desktop configuration may already have these shortcut keys assigned. In that case, you will need to reconfigure them (not in anjuta, because they are fixed) if you want to avail these shortcuts."
msgstr ""

#: C/interface.xml:82(para)
msgid "<emphasis>Context Help:</emphasis> CTRL-H -- Keep the cursor on the word (for example, the function name) for which you want to get the API help and press the shortcut. Context help only works if you have <application>DevHelp</application> installed. If you do not have <application>DevHelp</application> installed, the context help menu and toolbar button will be inactive. You can get it from <application>DevHelp</application> website. You will also have to install the related <application>DevHelp</application> books."
msgstr ""

#: C/interface.xml:92(para)
msgid "<emphasis>Auto complete:</emphasis> CTRL-ENTER -- Press the shortcut with the cursor placed at the end of incomplete word and a list of words matching the remaining part will appear. Scroll and select the right word from the list if you find one."
msgstr ""

#: C/interface.xml:99(para)
msgid "<emphasis>More shortcus:</emphasis> Look for the shortcut keys displayed on right side of the menu item labels. They could also be changed as explained in the tip below."
msgstr ""

#: C/interface.xml:106(title)
msgid "Customize shortcuts"
msgstr "Anpassning av genvägar"

#: C/interface.xml:107(para)
msgid "You can change the default shortcuts by using <menuchoice><guisubmenu>Settings</guisubmenu><guimenuitem>Customize shortcuts</guimenuitem></menuchoice>."
msgstr ""

#: C/interface.xml:116(title)
msgid "Toolbars"
msgstr "Verktygsrader"

#: C/interface.xml:117(para)
msgid "The operations which used most often are made available from the toolbars. There are five toolbars on the main window."
msgstr ""

#: C/interface.xml:124(para)
msgid "<interface>Main Toolbar</interface> - file and editing functions"
msgstr ""

#: C/interface.xml:125(para)
msgid "<interface>Browser Toolbar</interface> - browse bookmarks and function tags"
msgstr ""

#: C/interface.xml:130(title)
#: C/interface.xml:132(screeninfo)
msgid "Main toolbar"
msgstr ""

#: C/interface.xml:137(para)
msgid "Move the mouse pointer over any toolbar button. A tooltip describing the function of the button will appear."
msgstr ""

#: C/interface.xml:141(para)
msgid "There are some drop-down combination boxes on the toolbars. These are explained in later sections of the manual."
msgstr ""

#: C/interface.xml:150(title)
msgid "Main Window"
msgstr "Huvudfönster"

#: C/interface.xml:151(para)
msgid "In the main window, there are several frames which can be attached/detached and reordered by clicking on the title bar:"
msgstr ""

#: C/interface.xml:160(interface)
msgid "Documents"
msgstr "Dokument"

#: C/interface.xml:165(interface)
msgid "Project"
msgstr "Projekt"

#: C/interface.xml:170(interface)
msgid "Files"
msgstr "Filer"

#: C/interface.xml:175(interface)
msgid "Symbols"
msgstr "Symboler"

#: C/interface.xml:180(interface)
msgid "Messages"
msgstr "Meddelanden"

#: C/interface.xml:185(interface)
msgid "Terminal"
msgstr "Terminal"

#: C/interface.xml:193(para)
msgid "The <interface>Documents window</interface> will have one document active at a time (if there are any files opened). All of the file commands will apply to this active document. You can switch to any page by clicking on the page tab. You can do the same by right-clicking on the page tabs and choosing the document from the pop-up menu that will appear. This is especially useful when you have a lot of files opened, but not all of them are visible in the page tab area."
msgstr ""

#: C/interface.xml:204(para)
msgid "The <interface>Project window</interface> shows a tree of the project files if you have a project opened. Otherwise, the <interface>Project window</interface> is usually hidden. Double-clicking on any item in the <interface>Project window</interface> will open that file."
msgstr ""

#: C/interface.xml:212(para)
msgid "The <interface>Files window</interface> shows a file tree. If no project is open, the file tree usually points to the file system root but you can change it in the preferences. If a project is open it shows all files inside the project. Double clicking opens a file in the appropriate application as configured in the gnome mime preferences. Richt click opens a popup-menu which gives you choices how to open the file."
msgstr ""

#: C/interface.xml:221(para)
msgid "The <interface>Symbols window</interface> shows shows a tree of availible symbols in the project generated from ctags parser. Double clicking opens an editor window with the corresponding file and line."
msgstr ""

#: C/interface.xml:226(para)
msgid "There is also a <interface>Search tab</interface> in the Symbols window where you can search for symbols."
msgstr ""

#: C/interface.xml:232(para)
msgid "The <interface>Message window</interface> will list all the messages (both <filename>stdout</filename> and <filename>stderr</filename> outputs) when an external command is executed. The <interface>Message window</interface> is usually hidden, but appears as soon as an external command is executed, such as during file or project compilation, debugging sessions, searches, and many other operations. <application>Anjuta</application> also adds its own messages here when necessary."
msgstr ""

#: C/interface.xml:240(para)
msgid "The colors used to display the messages are important. Messages displayed in the standard foreground color (usually Black) are normal messages. Those displayed in Blue are important messages such as errors or other information. Messages shown in Red are <emphasis>Hot Linked</emphasis>. Double-clicking on such a message will take you to the particular file and line number specified in the message."
msgstr ""

#: C/interface.xml:248(para)
msgid "For example, when you compile a file which contains bugs, some red messages will appear showing what the problems are, and where they occur. Double-clicking on such messages will open the file and highlight the line containing the error."
msgstr ""

#: C/interface.xml:256(para)
msgid "The <interface>Terminal window</interface> is a terminal emulation where you can type commands just like in the gnome-terminal."
msgstr ""

#: C/interface.xml:264(title)
msgid "Session management"
msgstr "Sessionshantering"

#: C/interface.xml:265(para)
msgid "All of the settings, including the window sizes and window positions, are saved when you exit <application>Anjuta</application>. Session management is still under development, so you should not exit <application>Anjuta</application> with any unsaved documents. <application>Anjuta</application> will display a warning if you try to exit with unsaved documents still open."
msgstr ""

#: C/fileoperations.xml:2(title)
msgid "File Operations"
msgstr ""

#: C/fileoperations.xml:6(title)
msgid "Creating a New File and inserting texts"
msgstr ""

#: C/fileoperations.xml:8(title)
msgid "Creating New File"
msgstr ""

#: C/fileoperations.xml:9(para)
msgid "To create a new file, choose <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>New</guimenuitem></menuchoice> from the menubar, or click on the <guibutton>New File</guibutton> button on the toolbar. A new page will appear in the editor (or a new window if the parent document is windowed). This new document will be named <filename>newfile#1</filename>, <filename>newfile#2</filename>, <filename>newfile#3</filename> and so on."
msgstr ""

#: C/fileoperations.xml:20(title)
msgid "File Wizard"
msgstr ""

#: C/fileoperations.xml:31(title)
msgid "New File Wizard"
msgstr ""

#: C/fileoperations.xml:33(screeninfo)
#: C/fileoperations.xml:154(screeninfo)
msgid "The Open File dialog"
msgstr ""

#: C/fileoperations.xml:21(para)
msgid "A wizard can also be used to create a new file.To create a new file, choose <menuchoice><guisubmenu>File</guisubmenu><guisubmenu>New</guisubmenu><guimenuitem>File</guimenuitem></menuchoice> from the menubar. This will open the New File Wizard dialog. Select the file type. Enter the File name. The suffix will be automatically added. You can add a license information (according to your license choice) and a header. In case of C-C++ header file, you can also add an header template. Click <guibutton>OK</guibutton> to validate the creation. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:38(para)
msgid "<application>Anjuta</application> occatinally also creates new files during some operations. For example, some CVS operations, such as diff, file log, file status etc, create new files and add the output there. These could be saved in real file just like normal new files."
msgstr ""

#: C/fileoperations.xml:46(title)
msgid "Inserting Macros"
msgstr ""

#: C/fileoperations.xml:47(para)
msgid "Macros can be used to quickly edit repetitive sequences of text."
msgstr ""

#: C/fileoperations.xml:51(para)
msgid "Macro plugin must be activated."
msgstr ""

#: C/fileoperations.xml:56(title)
msgid "Inserting"
msgstr ""

#: C/fileoperations.xml:57(para)
msgid "Two types of macros are available: Anjuta macros and User macros (My macros). Anjuta macros are not modifiable by the user. On the other hand, User macros can be defined and modified by the user."
msgstr ""

#: C/fileoperations.xml:62(para)
msgid "To insert macro, move the cursor at the desired place. Select <menuchoice><guisubmenu>Edit</guisubmenu><guisubmenu>Macros</guisubmenu><guimenuitem>Macros...</guimenuitem></menuchoice>. The dialog window appears. Select the wanted macro in the list. The result of the macro expansion is displayed in the window and a summary is shown in the dialog window. Choose <guibutton>Insert</guibutton>. The expanded macro text is inserted at the cursor position."
msgstr ""

#: C/fileoperations.xml:75(title)
msgid "Macro"
msgstr "Makro"

#: C/fileoperations.xml:77(screeninfo)
msgid "The Macro dialog"
msgstr ""

#: C/fileoperations.xml:70(para)
msgid "Another possibility to insert macro is to select <menuchoice><guisubmenu>Edit</guisubmenu><guisubmenu>Macros</guisubmenu><guimenuitem>Insert Macro...</guimenuitem></menuchoice>, then to press the wanted macro shortcut. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:84(title)
msgid "Defining Macros"
msgstr "Definiera makron"

#: C/fileoperations.xml:85(para)
msgid "From the Insert-Macro window, choose <guibutton>Add</guibutton> or select <menuchoice><guisubmenu>Edit</guisubmenu><guisubmenu>Macros</guisubmenu><guimenuitem>Add Macro... </guimenuitem></menuchoice>. The Add/Edit window appears. Enter the macro name, choose or define a category and enter a shortcut. Then edit text relative to your macro. The character ' | ' will indicate the cursor position after the macro insertion. Choose <guibutton>OK</guibutton>. The macro is added to the list."
msgstr ""

#: C/fileoperations.xml:93(para)
msgid "The user can also erase a macro by selecting it in the list (only My Macros) then by choosing <guibutton>Remove</guibutton>."
msgstr ""

#: C/fileoperations.xml:101(title)
msgid "Add/Edit Macro"
msgstr "Lägg till/Redigera makro"

#: C/fileoperations.xml:103(screeninfo)
msgid "Add Edit dialog"
msgstr ""

#: C/fileoperations.xml:97(para)
msgid "Same manner, macro can be edited and modified by selecting it in the list then by choosing <guibutton>Edit</guibutton>. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:110(title)
msgid "Macro Keywords"
msgstr ""

#: C/fileoperations.xml:111(para)
msgid "Macros Keywords are available. They can be integrated in the macro definitions. The names of these macro Keywords start and finish by the character ' @ '."
msgstr ""

#: C/fileoperations.xml:119(title)
msgid "Keyword Macro"
msgstr ""

#: C/fileoperations.xml:121(screeninfo)
msgid "The Keyword macro"
msgstr ""

#: C/fileoperations.xml:115(para)
msgid "Available macro keywords are : @DATE_TIME@, @DATE_YMD@, @DATE_Y@, @USER_NAME@, @FILE_NAME@, @FILE_NAME_UP@, @FILE_NAME_UP_PREFIX@, @EMAIL@, @TABSIZE@, @INDENTSIZE@, @USETABS@. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:130(title)
msgid "Save file"
msgstr ""

#: C/fileoperations.xml:131(para)
msgid "You should save new documents as soon as possible to avoid any data loss in case of a crash."
msgstr ""

#: C/fileoperations.xml:140(title)
msgid "Opening and Saving Files"
msgstr "Öppna och spara filer"

#: C/fileoperations.xml:152(title)
msgid "Open File dialog"
msgstr ""

#: C/fileoperations.xml:144(para)
msgid "<emphasis>Opening a file:</emphasis> To open an existing file, choose <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Open</guimenuitem></menuchoice> from the menubar, click on the <guibutton>Open</guibutton> button on the toolbar, or press <keycombo><keycap>Ctrl</keycap><keycap>O</keycap></keycombo>. This will display the <interface>Open File</interface> dialog. <placeholder-1/> Select or enter the file you want to open, then click <guibutton>Open</guibutton>. To open more than one file at once, select multiple files to open by first pressing CTRL and clicking the files in the list and press <guibutton>Open</guibutton>. If you change your mind, click <guibutton>Cancel</guibutton> to dismiss the dialog without opening the file."
msgstr ""

#: C/fileoperations.xml:173(title)
msgid "Open Multiple File dialog"
msgstr ""

#: C/fileoperations.xml:175(screeninfo)
msgid "The Open File dialog in multiple-select mode"
msgstr ""

#: C/fileoperations.xml:165(para)
msgid "For selecting multiple files at once, select a file in the dialog and press CTRL once. This will bring the file selection dialog in multiple-select mode and multiple files could be selected from the list. Multiple file select mode is simlar to single file select mode, except that the file operation (for which the file selection was being done) will be performed for all the selected files. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:180(para)
msgid "The <bold>Show Hidden</bold>, if switched on (Click right), will make the hidden files (files starting with \".\"; visible in the file list. Depress it to make them hide. <application>Anjuta</application> fileselection dialog also has inbuild file type filter. Select the appropiate file type filter in the dialog and the file list will be limited to the files of the selected type only."
msgstr ""

#: C/fileoperations.xml:200(screeninfo)
msgid "The Save As File"
msgstr ""

#: C/fileoperations.xml:190(para)
msgid "<emphasis>Saving a file:</emphasis> To save a file, choose <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Save</guimenuitem></menuchoice> from the menubar, click on the <guibutton>Save</guibutton> button on the toolbar, or press <keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo>. This will save the file. If the file is new, a <interface>Save As</interface> dialog will appear. Enter a filename and click <guibutton>Save</guibutton> to save the new file with the name supplied. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:207(para)
msgid "<emphasis>Saving a file with a different name:</emphasis> You can explicitly save a file with a new filename. To do this, choose <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Save As</guimenuitem></menuchoice> from the menubar. A <interface>Save As</interface> dialog will appear prompting you to enter the new filename. Enter the name and click <guibutton>Save</guibutton>."
msgstr ""

#: C/fileoperations.xml:215(title)
msgid "File save as overwrite"
msgstr ""

#: C/fileoperations.xml:216(para)
msgid "When you use <guimenuitem>Save As</guimenuitem> with an existing file, the original is not deleted. It is left unchanged since the last save. If a file with the new filename already exists, a confirmation dialog will appear, to ensure that you want to overwrite it. Clicking <guibutton>Yes</guibutton> will overwrite the file with the file you are saving."
msgstr ""

#: C/fileoperations.xml:228(para)
msgid "<emphasis>Closing a file:</emphasis> To close a file, choose <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Close</guimenuitem></menuchoice> from the menubar, or click on the <guibutton>Close</guibutton> button on the toolbar. The file could also be closed by clicking the <guibutton>cross</guibutton> in the filename tab. This will close the current file. If the file is not saved, or is a new file, then <application>Anjuta</application> will prompt you to save the file before closing it."
msgstr ""

#: C/fileoperations.xml:242(title)
msgid "File auto save"
msgstr ""

#: C/fileoperations.xml:243(para)
msgid "If you have enabled auto-save, it will not auto-save any new files. You must first save them manually. The same applies to the <guimenuitem>Save All</guimenuitem> option: it will not save new files, if you haven't saved them first manually. <emphasis>You must save a file manually before auto-save or <guimenuitem>Save All</guimenuitem> will work with it.</emphasis>"
msgstr ""

#: C/fileoperations.xml:255(title)
msgid "Editing Files"
msgstr ""

#: C/fileoperations.xml:256(para)
msgid "<application>Anjuta</application> has a number of helpful features which aid in editing and working with source files. The following sections describe how to use some of the interesting features available."
msgstr ""

#: C/fileoperations.xml:262(title)
#: C/fileoperations.xml:271(title)
msgid "Editor Margins"
msgstr ""

#: C/fileoperations.xml:273(screeninfo)
#: C/fileoperations.xml:321(screeninfo)
#: C/fileoperations.xml:423(screeninfo)
msgid "The Tags toolbar"
msgstr ""

#: C/fileoperations.xml:263(para)
msgid "<emphasis>Editor Margins:</emphasis> Editor margins are the small area on the left of the editor for some special purposes. There are three editor margins available and all of them may not be available when you first start <application>anjuta</application>. They are Line numbers margin, Markers margin and Code fold margin. By default (that is, when you run <application>anjuta</application> for the first time) only the code fold margin witll be visible. The rest could be made visible from <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu></menuchoice>. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:278(para)
msgid "The <emphasis>Line Numbers Margin</emphasis> is largest of all the three margins (and slightly darker then rest) and displays the document's line numbers. <emphasis>Line Number Margin</emphasis> could be made visible or invisible by toggling <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu><guimenuitem>Line Numbers Margin</guimenuitem></menuchoice>. Single left clicking on this margin will select the whole line (including the last newline, if present). You can set the font properties for line number margin in the preferences."
msgstr ""

#: C/fileoperations.xml:287(para)
msgid "<emphasis>Markers Margin</emphasis> is the next margin which can be made visible or invisible by selecting <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu><guimenuitem>Markers Margin</guimenuitem></menuchoice>. This margin displays graphical icons to mark the give line. The markers which will be displayed in this margin are Bookmark marker (rectangular blue colored icon), Breakpoint marker (circular red colored) and Line indicator (pointed arrow yellow colored). Bookmark marker is used to indicate bookmaked lines which could be toggled from <menuchoice><guimenu>Goto</guimenu><guisubmenu>Bookmark</guisubmenu><guimenuitem> Toggle Bookmark</guimenuitem></menuchoice> with the cursor placed in that line. The breakpoint marker is used in debugger to mark the line with debugging breakpoints (see debugging section for more details). The line indicator marker is used to indicate a line when we do a jump from another part, for example when navigating the bookmarks and during single stepping in debugger."
msgstr ""

#: C/fileoperations.xml:300(para)
msgid "<emphasis>Code folding margin</emphasis> is where the folding tree is visisble. Clicking on these folding tree nodes will fold or unfold the code blocks. An underline will also be drawn below the folded line to make it more obvious that a block of code has been folded below the line. For more details on code folding, see the section <emphasis>Code Folding</emphasis> below."
msgstr ""

#: C/fileoperations.xml:308(title)
msgid "Invisible margin marker"
msgstr ""

#: C/fileoperations.xml:319(title)
msgid "Editor markes when markers margin is invisible"
msgstr ""

#: C/fileoperations.xml:309(para)
msgid "If the marker margin is not visible, the markers will be displayed by changing the background color of the line. For example, if there a breakpoint marker is set in a line and the marker margin is not visible, that line will be displayed with red background. Similarly, for bookmark marker and line indicatior marker, the background color of the line will be sky blue and yellow, respectively. If you do not like this (perhaps due to some contrasting themes), enable the <emphasis>Markers Margins</emphasis> from <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu><guimenuitem>Markers Margin</guimenuitem></menuchoice>. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:329(title)
msgid "Editor Guides"
msgstr ""

#: C/fileoperations.xml:330(para)
msgid "The editor could be made to make certain document information, which otherwise are normally not visible. <emphasis>Indentation guides, white spaces and line end characters</emphasis> are such information which could be made visible for editing comfort. They could be make visible or invisible by toggling the menu items in <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu></menuchoice>. Indentation guides are the small dotted lines drawn to connect the matching braces in the source code. When the cursor is over one such maching braces, the dotted indentation guide is highlighted to give a visual region of the indentation."
msgstr ""

#: C/fileoperations.xml:340(title)
#: C/fileoperations.xml:342(screeninfo)
msgid "Editor with guides"
msgstr ""

#: C/fileoperations.xml:348(title)
msgid "Syntax highlighting"
msgstr ""

#: C/fileoperations.xml:349(para)
msgid "<application>Anjuta</application> can highlight many different languages. This is usually done automatically by determining the type of the file from the file extension. If <application>Anjuta</application> cannot determine the type of the file, there will be no syntax highlighting. You can explicitly force a particular highlight style by selecting the style from the menu <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu><guisubmenu> Highlight Mode</guisubmenu></menuchoice>."
msgstr ""

#: C/fileoperations.xml:360(title)
msgid "Code folding"
msgstr ""

#: C/fileoperations.xml:361(para)
msgid "Source files which have block coding properties (such as C, C++, Pascal, Java etc.), have the advantage of working with <emphasis>code folds</emphasis>. All of the code blocks in the source file can be folded or unfolded by clicking on the fold points in the fold margin of the <interface>Editor window</interface> (usually a +/- symbol or up/down arrow). These fold points automatically appear for source files which use code blocks."
msgstr ""

#: C/fileoperations.xml:369(para)
msgid "Code folding is especially useful when editing big source files that run to thousands of lines. Once the folds are closed, the document appears to become smaller, facilitating easy browsing and editing of the file."
msgstr ""

#: C/fileoperations.xml:376(para)
msgid "Please note that code folding and editor guides are only avalible in the scintilla based editor."
msgstr ""

#: C/fileoperations.xml:381(title)
msgid "Auto-formatting source code"
msgstr ""

#: C/fileoperations.xml:382(para)
msgid "If the current file is a C or C++ source or header file, then it is possible to automatically indent (auto-format) the file. This gives a clean look to the source code, increases legibility, reduces the likelihood of syntax errors, and above all it saves time. This can be performed by choosing <menuchoice><guimenu>View</guimenu><guisubmenu>Editor</guisubmenu><guimenuitem>Auto-format </guimenuitem></menuchoice> on the menubar. Change the style of formatting by customizing the choices in the preferences."
msgstr ""

#: C/fileoperations.xml:392(title)
msgid "indent"
msgstr ""

#: C/fileoperations.xml:393(para)
msgid "You will need to have the <application>indent</application> utility installed in order to use this feature. Read the <ulink type=\"info\" url=\"info:indent\">info page for <application>indent</application></ulink> for further details."
msgstr ""

#: C/fileoperations.xml:404(title)
msgid "Symbol browser and Browsing Files"
msgstr ""

#: C/fileoperations.xml:405(para)
msgid "All C and C++ source and header files can be browsed using the tags in the files. All of the open C and C++ source and header files are scanned for available tags (a \"tag\" refers to a function definition, structure, macro, etc.). Please note that Tag and Symbol is used synonymously in this manual, except when refering to Tags browser and Symbol browser, which two different interfaces."
msgstr ""

#: C/fileoperations.xml:421(title)
#: C/fileoperations.xml:444(title)
msgid "Tags toolbar"
msgstr ""

#: C/fileoperations.xml:427(title)
msgid "Function symbols"
msgstr "Funktionssymboler"

#: C/fileoperations.xml:428(para)
msgid "Function prototype and definition, if present in the same file, can be usually distinguished from the corrosponding line numbers. Prototypes usually comes before the definition, so they are likely to have smaller line numbers."
msgstr ""

#: C/fileoperations.xml:414(para)
msgid "<emphasis>Tags Browser:</emphasis> Tags browser is available on the Browser toolbar. It shows a list of tags available in the currently active file (souce file). If there is no tags (or sysmbols) available in the file, the tags list will be invisible and a \"No Tags\" will be displayed instead. The tags in this list are shown along with the line numbers where they are found. If there are multiple symbols with the same name, they will be shown with different line numbers. <placeholder-1/><placeholder-2/>"
msgstr ""

#: C/fileoperations.xml:446(screeninfo)
msgid "Symbol browser"
msgstr ""

#: C/fileoperations.xml:436(para)
msgid "<emphasis>Symbol Browser:</emphasis> If there is a project open, <application>Anjuta</application> will scan for tags in all of the source and header files of the project. This way it is possible to go to any function definition, structure definition, class definition etc. without manually opening the file. You don't even have to know which file that tag is found in (except in the case of function definitions). The symbol browser lists all the available symbols in the project. <placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:454(title)
msgid "Tags synchronization"
msgstr ""

#: C/fileoperations.xml:455(para)
msgid "You don't have to worry about the synchronization and update of the tag database. <application>Anjuta</application> will take care of everything. You just have to decide which tag you want to go to!"
msgstr ""

#: C/fileoperations.xml:466(title)
msgid "Searching for and Replacing text in files"
msgstr ""

#: C/fileoperations.xml:468(title)
msgid "Searching"
msgstr ""

#: C/fileoperations.xml:469(para)
msgid "To search for a <emphasis>text</emphasis> or <emphasis>regular expression</emphasis> string in the current file, choose <menuchoice><guimenu>Edit</guimenu><guisubmenu>Search</guisubmenu><guimenuitem>Find</guimenuitem></menuchoice> or press <keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo>. This will open the <interface>Find</interface> dialog."
msgstr ""

#: C/fileoperations.xml:476(para)
msgid "Use the text box to specify the string to search for, and select whether it is a normal string or a regular expression (RegExp). It is also possible to specify the direction of search, whether the search is case-sensitive or not, and the scope of the search. Click <guibutton>Search</guibutton> to start searching."
msgstr ""

#: C/fileoperations.xml:482(para)
msgid "If the search is successful, the matched text in the document will be highlighted, marked... (according to the search action choice). If the search is not successful, a <emphasis>match not found</emphasis> message will be displayed."
msgstr ""

#: C/fileoperations.xml:487(para)
msgid "If you want to search again, click on the <guibutton>Search</guibutton> button on the main toolbar or press <keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo>. This will find the next match (<keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>G</keycap></keycombo> for the previous match). You can even change the search text when you do this. Enter the new string in the <guilabel>Search Expression</guilabel> text box in the main toolbar."
msgstr ""

#: C/fileoperations.xml:496(title)
msgid "Search Text dialog"
msgstr ""

#: C/fileoperations.xml:501(para)
msgid "To stop a long research, choose <guibutton>Stop</guibutton> button."
msgstr ""

#: C/fileoperations.xml:504(para)
msgid "If the \"Basic Search and Replace\" option is selected in the Setting window, the search direction can be choosen from the Expression window."
msgstr ""

#: C/fileoperations.xml:509(title)
msgid "Basic Search Text dialog"
msgstr ""

#: C/fileoperations.xml:516(title)
msgid "Specifying Search Range"
msgstr ""

#: C/fileoperations.xml:517(para)
msgid "In the \"Search Target dialog\", define the search location and the action to be done in case of search success."
msgstr ""

#: C/fileoperations.xml:521(para)
msgid "The maximum number actions can be defined by User."
msgstr ""

#: C/fileoperations.xml:525(title)
msgid "Search Target dialog"
msgstr ""

#: C/fileoperations.xml:530(para)
msgid "The user can select where the text will be searched."
msgstr ""

#: C/fileoperations.xml:534(title)
msgid "Search Target In choice"
msgstr ""

#: C/fileoperations.xml:540(title)
msgid "Searching in Files"
msgstr ""

#: C/fileoperations.xml:541(para)
msgid "To find text in your project, select \"search in\" <menuchoice><guimenu> All Project Files</guimenu></menuchoice>."
msgstr ""

#: C/fileoperations.xml:545(para)
#: C/fileoperations.xml:576(para)
msgid "Enter the text you want to search and specify search options (case-sensitive, complete words ...). Click <guibutton>Search</guibutton> to start searching."
msgstr ""

#: C/fileoperations.xml:550(para)
msgid "To find text in File list, select \"search in\" <menuchoice><guimenu> Specifying File List</guimenu></menuchoice>. Define the Search variables. Click <guibutton>Search</guibutton> to start searching."
msgstr ""

#: C/fileoperations.xml:557(title)
msgid "Search File List"
msgstr ""

#: C/fileoperations.xml:565(title)
msgid "Specifying File Patterns"
msgstr ""

#: C/fileoperations.xml:566(para)
msgid "To find in files and/or folders, select \"search in\" <menuchoice><guimenu> Specify File Patterns</guimenu></menuchoice>, choose the file types and/or folders you want to search."
msgstr ""

#: C/fileoperations.xml:571(para)
msgid "Remember, directories are searched recursively. All of the files under the directory, and the files under all the subdirectories, and the files under all of the sub-subdirectories (and so on) are all included in the search."
msgstr ""

#: C/fileoperations.xml:582(title)
msgid "Search File Pattern"
msgstr ""

#: C/fileoperations.xml:592(title)
msgid "Specifying Search Action"
msgstr ""

#: C/fileoperations.xml:593(para)
msgid "The user selects which action will be done in case of search success."
msgstr ""

#: C/fileoperations.xml:596(para)
msgid "According to the previous selections (Search in, Search direction ...), some actions coul be unavailable."
msgstr ""

#: C/fileoperations.xml:601(title)
msgid "Search Target Action choice"
msgstr ""

#: C/fileoperations.xml:609(title)
#: C/fileoperations.xml:617(title)
msgid "Replacing"
msgstr ""

#: C/fileoperations.xml:610(para)
msgid "Search and replace is similar to just finding text, except that you also specify the replace text in the <guilabel>Replace Text</guilabel> text box, and whether or not you want to be prompted before the replace takes place (Replace First Match or Replace All Matches)."
msgstr ""

#: C/fileoperations.xml:622(para)
msgid "Choose <guibutton>Replace</guibutton> to replace the matched text or <guibutton>Forward</guibutton> to jump to the next matched text."
msgstr ""

#: C/fileoperations.xml:629(title)
msgid "Search Setting"
msgstr ""

#: C/fileoperations.xml:630(para)
msgid "The user has the possibility of saving the setting of his search options."
msgstr ""

#: C/fileoperations.xml:633(para)
msgid "Item highlighted in red is the active item. Item by defaultt is the search setting which is loaded at Anjuta launching."
msgstr ""

#: C/fileoperations.xml:638(title)
msgid "Search Setting dialog"
msgstr ""

#: C/fileoperations.xml:649(title)
msgid "Printing a file"
msgstr ""

#: C/fileoperations.xml:659(title)
msgid "Print preview of a C file"
msgstr ""

#: C/fileoperations.xml:661(screeninfo)
msgid "Print preview"
msgstr ""

#: C/fileoperations.xml:650(para)
msgid "Print preview could be taken by selecting <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Print Preview</guimenuitem></menuchoice>. It will render the current file and present a preview of the print. Source codes which are hilighted in the editor are also highlighted similarly in the print (or preview). Addtional options are available to print with the line numbers, wrapped lines and/or headers in the Editor printing preferences from <menuchoice><guisubmenu>Settings</guisubmenu><guimenuitem>Preferences. </guimenuitem></menuchoice><placeholder-1/>"
msgstr ""

#: C/fileoperations.xml:668(title)
msgid "Print Preferences"
msgstr ""

#: C/fileoperations.xml:670(screeninfo)
msgid "Print preferences"
msgstr ""

#: C/fileoperations.xml:675(para)
msgid "When you are ready to print and satisfied with the preview, select <menuchoice><guisubmenu>File</guisubmenu><guimenuitem>Print</guimenuitem></menuchoice> or <guibutton>Print</guibutton> from the print preview window. This will bring up the actual print dialog as shown below. Select the appropriate print parameters and print the file with <guibutton>Print</guibutton> on it."
msgstr ""

#: C/fileoperations.xml:687(title)
msgid "Print Dialog"
msgstr ""

#: C/fileoperations.xml:689(screeninfo)
msgid "Print dialog"
msgstr ""

#: C/fileoperations.xml:682(para)
msgid "Landscaped or portrait page layout, paper size, page orientation and paper type could also be set. Remember to set them up properly according to your printer, otherwise printing may not come up properly. <placeholder-1/>"
msgstr ""

#: C/execute.xml:3(title)
msgid "Running and Testing"
msgstr ""

#: C/execute.xml:5(title)
msgid "Executing the program"
msgstr ""

#: C/execute.xml:6(para)
msgid "Once your executable is ready after the build, you can execute it by choosing the menu item <menuchoice><guisubmenu>Build</guisubmenu><guimenuitem>Execute</guimenuitem></menuchoice>, or pressing <keycap>F3</keycap>. You can specify which executable you want to use in case your project provides more than one and specify command line arguments."
msgstr ""

#: C/execute.xml:13(title)
msgid "Dependencies"
msgstr "Beroenden"

#: C/execute.xml:14(para)
msgid "Unlike the build stage, execution doesn't check for dependencies (at least for the time being). In other words, it does not check if the executable is up-to-date before it executes the program. So, <emphasis>you must take care of that yourself.</emphasis>"
msgstr ""

#: C/execute.xml:24(title)
msgid "Choose executable and set program parameters"
msgstr ""

#: C/execute.xml:26(screeninfo)
msgid "Setting program parameters"
msgstr ""

#: C/debugger.xml:3(title)
msgid "Debugging"
msgstr "Felsökning"

#: C/debugger.xml:6(para)
msgid "We are working on a new and improved debugger. The current is buggy and the information provided in this chapter might not be up-to-date!"
msgstr ""

#: C/debugger.xml:13(title)
msgid "Introduction to debugging"
msgstr "Introduktion till felsökning"

#: C/debugger.xml:15(emphasis)
msgid "To debug is human. To fix it is divine..."
msgstr ""

#: C/debugger.xml:17(para)
msgid "Well, the <emphasis>human</emphasis> part is what this section is about. The <emphasis>divine</emphasis> part is up to you!"
msgstr ""

#: C/debugger.xml:21(para)
msgid "When a program does not behave in the way it is supposed to, we say the program contains a bug or bugs. This does not refer to compilation errors those are simply errors and they are relatively easy to clear, because the compiler tells you where the problems are. On the other hand, bugs are errors that happen during the execution of the program and they can be hard (sometimes very hard!) to detect. Any program that you think is bug-free is never completely bug-free. All we can try to do is to reduce the number of bugs contained in the program. The process of removing bugs is known as debugging, and the tool that is used for debugging is called the debugger. Anjuta provides a very user-friendly and powerful debugging environment (actually, a GUI wrapper over gdb, a powerful command line debugging tool). A debugger tracks and traces the execution of the program and provides various views of information needed to study the execution of the program. Debugger Targets Before debugging, it is important to understand what debugging targets are. Debugging targets refer to those entities with which the debugger interacts during operation. There are four types of debugging targets: Executable Symbol table Core file Process There can be only one target active for each of the four types of targets at any give time. All of the targets do not need to be active for the debugger to work, although certain combinations are required active for a useful debugging session. Example combinations may be [ executable, symbol table, and process ] or [ executable, symbol table and core file ]. The target Executable becomes active when an executable file is loaded into the debugger. The target Symbol table is automatically loaded from the executable file, therefore it does not have to be handled separately. The symbol table is necessary for the debugger to identify the various symbols in the source code of the program. The information is included in the executable during the compilation (as long as the program is compiled with the Debug option enabled The target Core file becomes active when the core file is loaded into the debugger. A core file is the memory image of the program which was dumped by the kernel, usually because it had performed an illegal operation. The core file can provide information such as variable contents, register values, and stack trace of the program at the time of the error. By studying the core file it is possible to find out which part of the program has misbehaved and resulted in the core dump. The target Process becomes active when the program is executed under the debugger or when you attach to an already running process. Starting and Stopping the Debugger To start the debugger, choose the menu item DebugStart Debugger. This will start the debugger with the executable of the current project. If there is no project open, then it will load the executable of the currently active file. If there is no project open, and no active file, the debugger will start, but no executable will be loaded. The executable will have to be loaded manually. Once the debugger is started, a debugging session will be entered. When debugging is complete, exit the debugging session by choosing the menu item DebugStop Debugger. Loading Executables The debugger will automatically load an executable if a project or a file is currently open. To load a different executable, choose the menu item Debug Load Executable . A file selection dialog will open. Select the executable to debug and click on OK. Attaching to a Process It is possible to attach to a running process for debugging. Choose the menu item Debug Attach to Process . A list of all the process running on the system will appear. Attach to Process dialog Attach to Process dialog Select the process to attach to and click OK. Ensure that the executable (and hence the symbol table) have already been loaded into the debugger. If lots of question marks (??) appear during the debugging session, then the attached process and the executable do not match. Loading a Core file Choose the menu item Debug Load Core file to load the core file. Select the core file in the file selection dialog and click OK. When loading a core file, ensure that the executable file (and hence the symbol table) has already been loaded otherwise, debugging may be tricky! If lots of question marks (??) appear during the debugging session, then the core file and the executable do not match. Execution Execution of a program in the debugger can be finely controlled. The program can be executed in single steps, or allowed to continue until it encounters a breakpoint. Executing like this is essential for tracking program behaviour. Like a video editing session, the program can be executed in slow motion with the ability to go forward, pause, stop, and so on. The methods that can be used to execute a program in the debugger are described in the next few sections. Single stepping (step in) Single stepping executes only one statement of the program (from the place where it has stopped) and then returns control. If the statement that is executed contains one or more functions, the debugger tries to step inside the functions (in the sequence in which the functions are executed). Once the statement is executed and control is passed back, it is possible to study the various program parameters. If the program has not been started at the time single stepping is started, the program will be started and will be stopped at the first statement of the program (the first statement in the function main()). Choose the menu item Debug ExecutionStep In or click on the Step In icon in the Debug toolbar to step into a program. Single stepping (step over) Step over is similar to step in, except that it does not step inside any function in the statement being executed. The statement will be executed in one go. Choose the menu item Debug ExecutionStep Over or click on the Step Over icon in the Debug toolbar to step over statements in a program. Single stepping (step out) Step out will execute the current function until it returns. The program will be stopped once it exits from the function. Step out is not really single stepping, because it does not only execute a single statement it executes the whole function until that function returns to the calling function. Choose the menu item Debug ExecutionStep Out or click on the Step Out icon in the Debug toolbar to step out in a program. Run/Continue This option will continue the execution of the program until a breakpoint is encountered, or the program exits. If the program is not yet started, then the program will be started and executed until a breakpoint or program termination is reached. Choose the menu item Debug ExecutionRun/Continue or click on the Run/Continue icon in the Debug toolbar to continue the execution of a program. Stop Program This option will kill the program which is being debugged. Note that it is not possible to stop an attached process. Choose the menu item Debug Stop Program or click on the Stop Program icon in the Debug toolbar to terminate the execution of a program. Restart Program This option will stop the program and then restart it. All of the breakpoints will remain in effect. Note that it is not possible to restart an attached process. Choose the menu item Debug Restart Program to restart the execution of a program. Breakpoints When debugging a program, it is useful to be able to stop the execution of the program at a particular point, so that the state of the program can be examined at that location. Breakpoints enable this to happen. Breakpoints can be set at different locations in a source file, and then the program is allowed to run. When a breakpoint is encountered, the execution of the program is suspended, enabling expressions to be evaluated, variables to be inspected, the stack trace to be studied, and so on. Breakpoint dialog Breakpoint dialog Location, refers to the location of the code in the source file. Location can be specified in any of the following formats: File_name:Line_number Function_name File:Function_name The first one is obvious The location refers to the line number Line_number in the source file File. The second refers to the first line of the function Function_name. The third is similar to the second, except that this notation is used where there is more than one function with the name Function_name in the program. It is possible to differentiate between them by providing the File, so the notation refers to the function Function_name in the file File. Two parameters can be associated with each breakpoint: Break condition Pass count The Break condition is a valid C expression which should evaluate to a Boolean value that is, the evaluation of the expression should result in either TRUE(1) or FALSE(0). If the final evaluation value is not a Boolean value, then it will be appropriately type casted to a Boolean. Every time the breakpoint is encountered during the execution, the break condition will be evaluated. The debugger will break the execution only if the evaluation results in a TRUE value, otherwise it will continue the execution as though there had been no breakpoint. The default value of Break condition is always TRUE. The debugger will break the execution at the breakpoint location. The Pass count is an integer (unsigned) value which tells the debugger to skip the breakpoint that number of times before it is considered. Pass count has a higher priority than the Break condition. Only when the Pass count reaches zero will the debugger evaluate the Break condition (if any condition is present). If there is no condition, the debugger will break the execution once the Pass count counts down to zero. The default value of the Pass count is zero. The breakpoint will be considered when it is first encountered. Adding or Setting Breakpoints The Breakpoint editing window can be opened by choosing View Breakpoints or DebugBreakpoints Breakpoints . Click on Add. A dialog will appear. Breakpoint add dialog Breakpoint add dialog Enter the location at which to set the breakpoint. Optionally, enter the Break condition and the Pass count in the appropriate entry boxes. Click OK to set the breakpoint. A breakpoint may also be by highlighting the function name in the editor and choosing the menu item Debug BreakpointsSet Breakpoint (or by clicking on the Toggle breakpoint at cursor button on the Debug Toolbar). Editing Breakpoints Open the Breakpoint editing window by choosing the menu item View Breakpoints or DebugBreakpoints Breakpoints . Select the breakpoint to edit and click on Edit. A dialog will appear. Breakpoint edit dialog Breakpoint edit dialog Edit the entries as required and click on OK to commit the changes. Deleting Breakpoints Open the Breakpoint editing window by choosing the menu item View Breakpoints or DebugBreakpoints Breakpoints . Select the breakpoint to delete and click on Delete. The breakpoint will be deleted. To delete all breakpoints, click on Delete All. Enabling or Disabling Breakpoints Open the Breakpoint editing window by choosing the menu item View Breakpoints or DebugBreakpoints Breakpoints . Select the breakpoint to enable or disable and click on Toggle Enable. The breakpoint will be enabled or disabled, depending on the current state. To enable all or disable all breakpoints, click on Enable All or Disable All. Note When the debugger is started, all breakpoints will be set. Any old breakpoints (where the source file is more recent than the breakpoint) will be disabled. Working with Expressions FIXME: Evaluating expressions When control is returned from a program possibly at a breakpoint it is possible to evaluate expressions or inspect the values of variables in the program. Choose the menu item Debug Inspect/Evaluate , or click the Inspect button on the Debug Toolbar. A dialog prompting for the expression will appear. Supply a valid C expression, or a variable name, and click on OK. Inspect/Evaluate dialog Inspect/Evaluate dialog A window will appear showing the result of the evaluation. Evaluation result Evaluation result Alternatively, it is possible to highlight the expression in the editor and perform the above steps. This will save typing the expression in the Inspect dialog. The expression may be any valid C expression and may include function calls from the program, library calls, system calls, etc.. Expression Watch Inspecting or evaluating an expression provides the result only once. To continuously monitor some variables or expressions, use expression watch. Add all the expressions and variables to monitor in the watch. These values will be automatically updated and shown in the expression watch window. Expression Watch window Evaluation watch Adding an expression to watch Choose the menu item ViewWatch Window. Right-click on the expression watch window to open the Operation menu. Choose the menu item Add. A dialog prompting for the expression will appear. Enter the expression and click OK. Add Expression dialog Add Expression dialog If the expression was selected in the editor prior to the addition, it will automatically appear in the dialog. Removing an expression from watch Choose the menu item ViewWatch Window. Right-click on the expression watch window to open the Operation menu. Choose the menu item Remove to remove the entry. Clearing the watch Choose the menu item ViewWatch Window. Right-click on the expression watch window to open the Operation menu. Choose the menu item Clear to update or clear. Local varables Local variables of the current frame (the current funtion in which the program control is present), displayed and updated in the Locals pane of the message manager. During execution of the program (eg. during single stepping), local variables will be updated. If any varialble value was changed in the last debugging step, its value will be highlight in red. The variables are presented in a tree form for easy view. Local variables Local variables Varables tips Variable tips is a quick way to find out the value of a variable. Hover the mouse cursor over the variable name whose value you would like to have and wait for a couple of seconds. The value of the variable (if availabe with the debugger) will be displayed as a tip. variable-tip Variable tip Stack Trace Stack Window The Stack trace window shows the contents of the program stack. It lists all of the functions and their arguments in the sequence they were called. There is also a number representing each call. This number is called the Frame. Each call in the trace exists in a different frame. This starts from frame 0 (the last function called) and grows higher as the function nesting become deeper. Choose the menu item ViewProgram Stack, to open the stack trace for the program being debugged. Stack trace window Stack trace window A small arrow points to the currently selected frame in the stack trace. By default, this will be frame 0, the last function called. All of the evaluation and inspection of expressions or variables will be with reference to this selected frame. The scope of the variables or expressions being evaluated will be limited to the selected frame only. The same applies for expressions in the watch. Setting the current frame Double-clicking on any frame in the stack trace will set that frame as the currently selected frame (the arrow will point to the frame, indicating that it has been selected as the current frame). Alternatively, open the Operation menu by right-clicking on the Stack trace window, and choose the menu item Set frame to set the frame. Information about the current frame It is possible to obtain information about the currently selected frame by choosing the menu item Debug InformationInfo Current Frame. A window will open describing the current frame. Current Frame Information Current Frame Information Updating Stack trace Choose the menu item Update from the Operation menu (right-click on the Stack trace window) to refresh the Stack trace window. Others There are a number of other debugger features which are used less frequently, but are nevertheless handy. Kernel Signals Kernel signals are a way of signaling between processes in Linux. The list of signals available for a program can be displayed by choosing the menu item ViewKernel Signals. A window will open which lists all of the signals available in the system along with a brief description of each signal. Kernel Signals window Kernel Signals window There are three columns which specify what to do when the signal is received: Stop this tells the debugger whether to stop the program execution (and return control) when the program receives this signal. Print this tells the debugger whether to display the received signal. Pass this tells the debugger whether to pass the signal to the program. Changing behaviour on signals To change the way debugger behaves when a particular signal is received, select the signal in the list. Right-click to open the Operation menu. Choose Modify Signal. This will open a dialog. Set the three behaviours and click OK to commit the change. Modify Kernel Signal dialog Modify Kernel Signal dialog Sending the signal to the program To explicitly sent the signal to the program being debugged, select the signal in the given list. Right-click to open the Operation menu. Choose the menu item Send to process. A confirmation dialog will appear. Click OK to confirm and send the signal to the program. Updating the signal list Choose the menu item Update from the Operation menu (right-click in the Kernal Signals window to open) to refresh the Kernel Signals window. CPU registers It is possible to examine the contents of the internal registers of the CPU (microprocessor). Choose the menu item View Registers. A window listing all of the available registers in the microprocessor and their corrosponding contents will appear. CPU Registers window CPU Registers window Dynamically loaded Libraries To obtain a list of the dynamic libraries used by the program, choose the menu item View Shared Libraries. This will bring open a window which will list all the shared libraries the program has loaded and their locations in the memory. It also shows whether the symbol table is loaded or not (Yes/No). Shared Libraries window Shared Libraries window Interrupting the program While the program is running and has control, no debugging tasks can be performed. To obtain control while the program is running, choose the menu item Debug Interrupt Program. This will interrupt the program and return control to the debugger. For interruption to work properly, set the debugger behaviour for the interrupt signal (SIGINT) to the value [ Stop:Yes, Print:Yes, Pass:No ]. This is the default value."
msgstr ""

#: C/compileopts.xml:4(title)
msgid "Setting Compiler Options"
msgstr ""

#: C/compileopts.xml:5(para)
msgid "You can customize the the way the compiler will compile your file or project. Remember, each project will have its own set of compiler settings. If the options are modified when there is no project open, the settings are saved separately and will be used when compiling and building single files only. These are all transparent to the user: <application>Anjuta</application> handles them automatically."
msgstr ""

#: C/compileopts.xml:15(title)
msgid "Support for your program"
msgstr ""

#: C/compileopts.xml:17(para)
msgid "You have have seen in the previous sections how to specify basic compile options (such as include and library paths, linker settings, and so on). This process can be cumbersome when you want to use some of the more standard or popular libraries GTK and GNOME, for example. To enable easy implementation of these libraries and to avoid and inconsistencies, the developers of such libraries usually supply a configuration program (usually called *-config) along with their libraries. Well, that's the theory. Now for the practical part. Anjuta will do the difficult parts for you, so you do not need to worry about the configuration programs for these libraries just add the particular support to your project. To add support for a library to your program: Choose the menu item Settings Compiler and Linker Settings and click on the Supports tab in the Compiler Options dialog. Select the supports for your program by double-clicking on them. Double-clicking again on any selected supports will unselect them. Supports dialog Supports dialog This will automatically set all the include paths and the libraries necessary for the options chosen. There will be no need to set the include paths and libraries manually. Available supports Currently, Anjuta has only a few library support options Glib, GTK, GNOME and Bonobo. Some of these are not yet fully supported. Compiler options for supports Once basic library supports have been specified, there is no need to manually set the basic compiler options usually required for these libraries. Any other libraries may still need compiler settings to be changed. Include Paths To set include paths for your program: Choose the menu item Settings Compiler and Linker Settings and click on the Include Paths tab in the Compiler Options dialog. Enter each of the paths one by one and click on the Add button for each entry. To remove an entry, select the entry in the list and click on Remove. To edit an entry, select the entry, modify it in the text box and click on Update To clear all of the entries, click on Clear. Include Paths dialog Include Paths dialog Absolute or Relative include paths? If the settings are for a project, then all include paths should be relative to the source directory of the project. Avoid using absolute paths otherwise, when you distribute the source code, other people will have problems trying to build the program. If the settings are are made outside of a project, then it doesn't matter whether the paths are absolute or relative the settings will be local to your machine only. Library Paths When your program links to external libraries (specified via the Libraries settings in the next section), the linker will search for those libraries in the library search paths. Anjuta will automatically use system library paths, but you should add any additional search paths to your project. To set library paths for your program: Choose the menu item Settings Compiler and Linker Settings and click on the Library Paths tab in the Compiler Options dialog. Enter each of the paths one by one and click on the Add button for each entry. To remove an entry, select the entry in the list and click on Remove. To edit an entry, select the entry, modify it in the text box and click on Update To clear all of the entries, click on Clear. Library Paths dialog Library Paths dialog Absolute or Relative include paths? If the settings are for a project, then all library paths should be relative to the source directory of the project. Avoid using absolute paths otherwise, when you distribute the source code, other people will have problems trying to build the program. If the settings are are made outside of a project, then it doesn't matter whether the paths are absolute or relative the settings will be local to your machine only. Libraries to link Libraries are external modules that must be linked with your program at the final stage of the build, to produce another library or an executable. The linker is passed the list of libraries to link with to construct the final target. It is also possible to provide the names of object modules (*.o files) along with the libraries to link against. Object modules are specified by a special flag (asterisk *) at the start of the object module name (so that Anjuta can differentiate them from the library modules). Object modules must be listed with their full paths (absolute or relative, depending upon the context), because they will not be searched for on the library search path. Example: in the screenshot below, the first entry \"scintilla\" is a library, while those starting with \"*\" are object modules. Libraries dialog Libraries dialog Libraries follow the naming format: libXXX.a. When specifying libraries in the list, the prefix \"lib\" and the suffix \".a\" are skipped, and only the library name \"XXX\" is given in the entry. To set libraries for your program: Choose the menu item Settings Compiler and Linker Settings and click on the Libraries tab in the Compiler Options dialog. Enter each of the library names (and object names, if required) and click on the Add button for each entry. Libraries can also be selected from the list shown in the right pane of the dialog. Not all libraries will be available in this list. Object module paths Object modules must be specified with an explicit path and must start with an asterisk (*). Explicit path means the path should be relative path of the object from the source dir and the filename should be complete (eg. ../../lib/diagram.o). To remove an entry, select the entry in the list and click on Remove. To disable an entry, double-click on the entry in the list. To re-enable it, double-click again. Entries that are disabled are not included in the the linking process. To edit an entry, select the entry, modify it in the text box and click on Update To clear all of the entries, click on Clear. Defining Macros To define macros for your program: Choose the menu item Settings Compiler and Linker Settings and click on the Defines tab in the Compiler Options dialog. Enter each macro to define one by one and click on the Add button for each entry. To remove an entry, select the entry in the list and click on Remove. To edit an entry, select the entry, modify it in the text box and click on Update To clear all of the entries, click on Clear. Defines dialog Defines dialog Compiler Warnings It is possible to tell the compiler how to respond to each different type of warning. Choose the menu item Settings Compiler and Linker Settings and click on the Warnings tab in the Compiler Options dialog. Select the warnings you want to see in the Message window when you compile or build your file or project. Selecting No Warnings will disable all warnings. Similarly, selecting All Warnings will enable all warnings. Warnings dialog Warnings dialog Code Optimization To set the level of Optimization for code compilation: Choose the menu item Settings Compiler and Linker Settings and click on the Optimization tab in the Compiler Options dialog. Select the level of optimization required. Optimization dialog Optimization dialog Note that it is not a good idea to enable any sort of optimization if you have also enabled debugging. It will not do any harm to do so, but it will make life much more difficult when debugging the program. With optimization enabled, the compiler will modify your code to improve performance. This sometimes creates confusion during debugging, as the line number that the debugger refers to will not always correspond to the actual line number in the source file. Code optimization takes place during the compilation stage only, and does not affect the source code in the file. Other compiler settings To set miscellaneous compiler settings: Choose the menu item Settings Compiler and Linker Settings and click on the Others tab in the Compiler Options dialog. Various options for compiling are set on this tabbed section. Other Compiler Settings dialog Other Compiler Settings dialog The first is the Enable Debugging option. This option tells the compiler to add extra debug information (such as the symbol table), which is necessary for stepping through the code. This makes the program slightly larger. This option will be most useful during the development of your program. When the code is ready for the release, disable this option and build the program again. The project should be cleaned first before the rebuild otherwise, due to automatic dependency checking, not all of the files may be built with this option disabled. Note that it is not a good idea to enable any sort of optimization if you have also enabled debugging. It will not do any harm to do so, but it will make life much more difficult when debugging the program. With optimization enabled, the compiler will modify your code to improve performance. This sometimes creates confusion during debugging, as the line number that the debugger refers to will not always correspond to the actual line number in the source file. The second option Enable Profiling is similar to the Enable Debugging option, except that it builds your program with profiling information. Profiling is not yet implemented in Anjuta. For the time being, you can use gprof, a console-based profiler; or MemProf, which is a GUI (GTK) application. Read the gprof manual page to learn how to profile your program. Enabling profiling will make a progam run very slowly, so it should only be used for debugging. Additional options to pass to the compiler and linker can be entered into the text boxes on this tabbed section."
msgstr ""

#: C/build.xml:3(title)
msgid "Compiling and Building"
msgstr ""

#: C/build.xml:5(title)
msgid "Compiling and building programs"
msgstr ""

#: C/build.xml:6(para)
msgid "Once you have written a program, you will probably want to build and run it. To compile the current file, click choose the menu item <menuchoice><guisubmenu>Build</guisubmenu><guimenuitem>Compile</guimenuitem></menuchoice>, or press <keycap>F9</keycap>. The <interface>Message window</interface> will appear and list all the messages including any compilation errors. You can double-click on the error lines (displayed in red) to go to the particular line where the error occurred. You can define macros, specify include paths, and set the compiler options if you so wish. Compiling a file will save it first, then it will be compiled."
msgstr ""

#: C/build.xml:15(para)
msgid "Compiling a file does not build an executable. It simply generates an object (<filename>*.o</filename>) file which is later linked to build the executable."
msgstr ""

#: C/build.xml:19(para)
msgid "To build a file, choose the menu item <menuchoice><guisubmenu>Build</guisubmenu><guimenuitem>Build</guimenuitem></menuchoice>, or press <keycap>F11</keycap>. This will again display the <interface>Message window</interface> listing all the messages that are encountered during the build. The build process will link your object file with libraries and generate the executable."
msgstr ""

#: C/build.xml:27(title)
msgid "Build dependencies"
msgstr ""

#: C/build.xml:28(para)
msgid "The build process will compile your file first if the object file is not up-to-date or it has not yet been generated. This means that you can build a file without first compiling it. However, when you are dealing with a project rather then a single file, compiling and building are entirely different concepts."
msgstr ""

#: C/authors.xml:2(title)
msgid "Authors"
msgstr "Upphovsmän"

#: C/authors.xml:3(para)
msgid "The <application>Anjuta</application> project was founded by Naba Kumar. Please visit <ulink type=\"http\" url=\"http://anjuta.org?page=authors/\">this online list</ulink> to know all Anjuta contributors."
msgstr ""

#: C/authors.xml:10(para)
msgid "For more information on <application>Anjuta</application>, please visit the project website at <ulink type=\"http\" url=\"http://anjuta.org/\">http://anjuta.org</ulink>. Bug reports should be made using the Bug Tracker at the project development site <ulink type=\"http\" url=\"http://www.sourceforge.net/projects/anjuta\"> http://www.sourceforge.net/projects/anjuta</ulink>"
msgstr ""

#: C/authors.xml:18(para)
msgid "This manual was written by Naba Kumar and Andy Piper. Please send all comments and suggestions regarding this manual to Anjuta Devel list <email>anjuta-devel@list.sourceforge.net</email>. Comments may also be submitted via the project trackers at SourceForge."
msgstr ""

#: C/anjuta-manual.xml:27(title)
msgid "Anjuta IDE Manual"
msgstr ""

#: C/anjuta-manual.xml:28(edition)
msgid "v1.0.0"
msgstr "v1.0.0"

#: C/anjuta-manual.xml:30(para)
msgid "Manual for the Anjuta IDE"
msgstr ""

#: C/anjuta-manual.xml:34(firstname)
msgid "Naba"
msgstr "Naba"

#: C/anjuta-manual.xml:35(surname)
msgid "Kumar"
msgstr "Kumar"

#: C/anjuta-manual.xml:38(firstname)
msgid "Andy"
msgstr "Andy"

#: C/anjuta-manual.xml:39(surname)
msgid "Piper"
msgstr "Piper"

#: C/anjuta-manual.xml:42(firstname)
msgid "Biswapesh"
msgstr "Biswapesh"

#: C/anjuta-manual.xml:43(surname)
msgid "Chattopadhyayr"
msgstr "Chattopadhyayr"

#: C/anjuta-manual.xml:46(firstname)
msgid "Johannes"
msgstr "Johannes"

#: C/anjuta-manual.xml:47(surname)
msgid "Schmid"
msgstr "Schmid"

#: C/anjuta-manual.xml:51(year)
msgid "2001-2002"
msgstr "2001-2002"

#: C/anjuta-manual.xml:52(year)
msgid "2006"
msgstr "2006"

#: C/anjuta-manual.xml:53(holder)
msgid "Naba Kumar, Andy Piper, Biswapesh Chattopadhyay"
msgstr "Naba Kumar, Andy Piper, Biswapesh Chattopadhyay"

#: C/anjuta-manual.xml:54(holder)
msgid "Johannes Schmid"
msgstr "Johannes Schmid"

#: C/anjuta-manual.xml:58(para)
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the <citetitle>GNU Free Documentation License</citetitle>, Version 1.1 or any later version published by the Free Software Foundation with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. You may obtain a copy of the <citetitle>GNU Free Documentation License</citetitle> from the Free Software Foundation by visiting <ulink type=\"http\" url=\"http://www.fsf.org\">their Web site</ulink> or by writing to: Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA."
msgstr ""

#: C/anjuta-manual.xml:70(para)
msgid "Many of the names used by companies to distinguish their products and services are claimed as trademarks. Where those names appear in any GNOME documentation, and those trademarks are made aware to the members of the GNOME Documentation Project, the names have been printed in caps or initial caps."
msgstr ""

#: C/anjuta-manual.xml:81(revnumber)
msgid "Anjuta Manual 2.1.0"
msgstr "Handbok för Anjuta 2.1.0"

#: C/anjuta-manual.xml:82(date)
msgid "2007"
msgstr "2007"

#: C/anjuta-manual.xml:84(para)
msgid "Johannes Schmid<email>jhs@gnome.org</email>"
msgstr "Johannes Schmid<email>jhs@gnome.org</email>"

#: C/anjuta-manual.xml:86(para)
msgid "Anjuta Team"
msgstr "Anjuta-teamet"

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: C/anjuta-manual.xml:0(None)
msgid "translator-credits"
msgstr "Daniel Nylander <po@danielnylander.se>, 2007"

