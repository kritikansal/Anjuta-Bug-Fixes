/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
/*
 *  ianjuta-debugger-register.h -- Autogenerated from libanjuta.idl
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */

#ifndef _IANJUTA_DEBUGGER_REGISTER_H_
#define _IANJUTA_DEBUGGER_REGISTER_H_

#include <glib-object.h>
#include <libanjuta/interfaces/ianjuta-debugger.h>

G_BEGIN_DECLS

#define IANJUTA_TYPE_DEBUGGER_REGISTER (ianjuta_debugger_register_get_type ())
#define IANJUTA_DEBUGGER_REGISTER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), IANJUTA_TYPE_DEBUGGER_REGISTER, IAnjutaDebuggerRegister))
#define IANJUTA_IS_DEBUGGER_REGISTER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), IANJUTA_TYPE_DEBUGGER_REGISTER))
#define IANJUTA_DEBUGGER_REGISTER_GET_IFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), IANJUTA_TYPE_DEBUGGER_REGISTER, IAnjutaDebuggerRegisterIface))

#define IANJUTA_DEBUGGER_REGISTER_ERROR ianjuta_debugger_register_error_quark()

typedef struct _IAnjutaDebuggerRegister IAnjutaDebuggerRegister;
typedef struct _IAnjutaDebuggerRegisterIface IAnjutaDebuggerRegisterIface;

/**
 * IAnjutaDebuggerRegisterData:
 * @num: register identifier
 * @name: register name
 * @value: register value
 *
 * Defines a register data.
 */
typedef struct _IAnjutaDebuggerRegisterData IAnjutaDebuggerRegisterData;
struct _IAnjutaDebuggerRegisterData {
	guint num;
	gchar *name;
	gchar *value;
};


struct _IAnjutaDebuggerRegisterIface {
	IAnjutaDebuggerIface g_iface;
	

	gboolean (*list_register) (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerGListCallback callback,  gpointer user_data, GError **err);
	gboolean (*update_register) (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerGListCallback callback,  gpointer user_data, GError **err);
	gboolean (*write_register) (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerRegisterData *value, GError **err);

};


GQuark ianjuta_debugger_register_error_quark     (void);
GType  ianjuta_debugger_register_get_type        (void);

gboolean ianjuta_debugger_register_list_register (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerGListCallback callback,  gpointer user_data, GError **err);

gboolean ianjuta_debugger_register_update_register (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerGListCallback callback,  gpointer user_data, GError **err);

gboolean ianjuta_debugger_register_write_register (IAnjutaDebuggerRegister *obj, IAnjutaDebuggerRegisterData *value, GError **err);


G_END_DECLS

#endif
